Study points for the exam
To help you prepare, the exam objectives below highlight the task areas you can expect to see covered in the exam.
You should be able to demonstrate these skills and abilities:
* Implement images using Podman
   * Understand and use FROM (the concept of a base image) instruction.
      * The FROM instruction initializes a new build stage and sets the Base Image for subsequent instructions. As such, a valid Dockerfile must start with a FROM instruction. The image can be any valid image – it is especially easy to start by pulling an image from the Public Repositories.
   * Understand and use RUN instruction.
      * The RUN instruction will execute any commands in a new layer on top of the current image and commit the results. The resulting committed image will be used for the next step in the Dockerfile.
   * Understand and use ADD instruction.
      * The ADD instruction copies new files, directories or remote file URLs from <src> and adds them to the filesystem of the image at the path <dest>.
   * Understand and use COPY instruction.
      * The COPY instruction copies new files or directories from <src> and adds them to the filesystem of the container at the path <dest>.
   * Understand the difference between ADD and COPY instructions.
      * COPY takes in a src and destination. It only lets you copy in a local file or directory from your host (the machine building the Docker image) into the Docker image itself.
      * ADD lets you do that too, but it also supports 2 other sources. First, you can use a URL instead of a local file / directory. Secondly, you can extract a tar file from the source directly into the destination.
   * Understand and use WORKDIR and USER instructions.
      * The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile. If the WORKDIR doesn’t exist, it will be created even if it’s not used in any subsequent Dockerfile instruction.
      * The USER instruction sets the user name (or UID) and optionally the user group (or GID) to use when running the image and for any RUN, CMD and ENTRYPOINT instructions that follow it in the Dockerfile.
   * Understand security-related topics.
   * Understand the differences and applicability of CMD vs. ENTRYPOINT instructions.
      * ENTRYPOINT instruction allows you to configure a container that will run as an executable. It looks similar to CMD, because it also allows you to specify a command with parameters. The difference is ENTRYPOINT command and parameters are not ignored when Docker container runs with command line parameters. (There is a way to ignore ENTTRYPOINT, but it is unlikely that you will do it.)
      * Dockerfile should specify at least one of CMD or ENTRYPOINT commands.
      * ENTRYPOINT should be defined when using the container as an executable.
      * CMD should be used as a way of defining default arguments for an ENTRYPOINT command or for executing an ad-hoc command in a container.
      * CMD will be overridden when running the container with alternative arguments.
   * Understand ENTRYPOINT instruction with param.
      * ENTRYPOINT ["executable", "param1", "param2"]
   * Understand when and how to expose ports from a Docker file.
      * The EXPOSE instruction informs Docker that the container listens on the specified network ports at runtime. You can specify whether the port listens on TCP or UDP, and the default is TCP if the protocol is not specified. The EXPOSE instruction does not actually publish the port. It functions as a type of documentation between the person who builds the image and the person who runs the container, about which ports are intended to be published. To actually publish the port when running the container, use the -p flag on docker run to publish and map one or more ports, or the -P flag to publish all exposed ports and map them to high-order ports.
   * Understand and use environment variables inside images. Understand ENV and ARG instructions.
      * The ENV instruction sets the environment variable <key> to the value <value>. This value will be in the environment for all subsequent instructions in the build stage and can be replaced inline in many as well. The value will be interpreted for other environment variables, so quote characters will be removed if they are not escaped. Like command line parsing, quotes and backslashes can be used to include spaces within values.
      * ARG values are not available after the image is built. A running container won’t have access to an ARG variable value. But unlike ARG, you can’t override ENV values directly from the command line when building your image. 
   * Understand container volume and mount a host directory as a data volume.
      * sudo mkdir /var/dbfiles
      * sudo chown -R 27:27 /var/dbfiles
      * sudo semanage fcontext -a -t container_file_t '/var/dbfiles(/.*)?'
      * sudo restorecon -Rv /var/dbfiles
   * Understand security and permissions requirements related to this approach.
   * Understand lifecycle and cleanup requirements of this approach.
* Manage images
   * Understand private registry security.
   * Interact with many different registries.
   * Understand and use image tags.
      * sudo podman tag IMAGE IMAGE_WITH_TAG
   * Push and pull images from and to registries.
      * sudo podman push IMAGE_WITH_TAG_AND_REGISTRY
   * Back up an image with its layers and meta data vs. backup a container state.
* Run containers locally using Podman
   * Get container logs.
      * oc logs OBJECT/OBJECT_NAME
   * Listen to container events on the container host.
   * Use Podman inspect.
      * sudo podman inspect CONTAINER_ID
* Basic OpenShift knowledge
* Creating applications in OpenShift
   * Create, manage and delete projects from a template, from source code, and from an image.
      * From template: $ oc process -f template.json | oc create -f -
      * From source: $ oc 
      * From image: 
   * Customize catalog template parameters.
   * Specifying environment parameters.
   * Expose public applications.
* Troubleshoot applications in OpenShift
   * Understand the description of application resources.
   * Get application logs.
   * Inspect running applications.
   * Connecting to containers running in a pod.
      *    * Copy resources to/from containers running in a pod.
      * oc  rsync
      * podman  cp